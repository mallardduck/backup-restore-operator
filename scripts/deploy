#!/bin/bash

check_kubeconfig() {
  if ! kubectl get nodes >/dev/null 2>&1; then
      echo "The command 'kubectl get nodes' returned an error"
      echo "Either make sure ~/.kube/config is correctly configured or set the KUBECONFIG environment variable to the correct configuration file"
      exit 1
  fi
  echo "Communicating with cluster:"
  kubectl get nodes -o wide
}

deploy_encryption_configuration() {
  KUBECTL_CMD="kubectl"
  check_kubeconfig
  
  local ENCRYPTION_CONFIG
  ENCRYPTION_CONFIG=$(cat <<EOF
apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
  - resources:
      - "*.*"
    providers:
      - secretbox:
          keys:
            - name: key1
              secret: YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY=
EOF
  )

  echo "Creating EncryptionProvider secret"
  ${KUBECTL_CMD} -n cattle-resources-system create secret generic encryptionconfig --from-literal=encryption-provider-config.yaml="$ENCRYPTION_CONFIG"
}

deploy_minio() {
  local PUBLIC_CRT
  PUBLIC_CRT=$(cat <<EOF
-----BEGIN CERTIFICATE-----
MIICSTCCAe+gAwIBAgIQWgUVWCiZdyOGruNe6m4iWjAKBggqhkjOPQQDAjBMMRww
GgYDVQQKExNDZXJ0Z2VuIERldmVsb3BtZW50MSwwKgYDVQQLDCNlbGl5YW1sZXZ5
QEVsaXlhbXMtTUJQLmF0dGxvY2FsLm5ldDAeFw0yMjA1MTExNDAxMjBaFw0zMjA1
MTEwMjAxMjBaMEwxHDAaBgNVBAoTE0NlcnRnZW4gRGV2ZWxvcG1lbnQxLDAqBgNV
BAsMI2VsaXlhbWxldnlARWxpeWFtcy1NQlAuYXR0bG9jYWwubmV0MFkwEwYHKoZI
zj0CAQYIKoZIzj0DAQcDQgAEFH8UPCl/vAHkMbTF3E8yhSdLNH2XueKUHns+O4FR
hn096OJKnGZFb/HiW9iJWhj4CJ4LubSvsiZJZ7YuDlM9faOBsjCBrzAOBgNVHQ8B
Af8EBAMCAqQwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zAd
BgNVHQ4EFgQUImjresql78fBpwSV7lp4fT4+NnwwWAYDVR0RBFEwT4IFbWluaW+C
C21pbmlvLm1pbmlvgg9taW5pby5taW5pby5zdmOCHW1pbmlvLm1pbmlvLnN2Yy5j
bHVzdGVyLmxvY2Fsgglsb2NhbGhvc3QwCgYIKoZIzj0EAwIDSAAwRQIgWT4CU5ib
LNeXJmh2lnqEvaeKgqLHPFgMOQg+4TyO+uQCIQCI5WX1E84B+z6yX7WKIBYJIjto
RjQi75QniF10pi2jKA==
-----END CERTIFICATE-----
EOF
  )
  local PRIVATE_KEY
  PRIVATE_KEY=$(cat <<EOF
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgRiROiBUTvzxfDbiu
60w9WdlRKAI7Jy0c26uC2FoAZdahRANCAAQUfxQ8KX+8AeQxtMXcTzKFJ0s0fZe5
4pQeez47gVGGfT3o4kqcZkVv8eJb2IlaGPgIngu5tK+yJklnti4OUz19
-----END PRIVATE KEY-----
EOF
  )

  KUBECTL_CMD="kubectl"
  check_kubeconfig

  helm repo add minio https://charts.min.io/
  helm repo update

  echo "Creating Minio Namespace"
  ${KUBECTL_CMD} create ns minio

  echo "Creating Minio tls-ssl secret"
  ${KUBECTL_CMD} -n minio create secret generic tls-ssl-minio --from-literal=private.key="$PRIVATE_KEY" --from-literal=public.crt="$PUBLIC_CRT"

  echo "Installing Minio"
  helm install --namespace minio --set rootUser=inspectorgadget,rootPassword=gogadgetgo --set tls.enabled=true,tls.certSecret=tls-ssl-minio --set replicas=1 --set resources.requests.memory=2Gi --set persistence.enabled=false --set drivesPerNode=0 --set pools=0 --set mode=standalone --set buckets[0].name=rancherbackups --set buckets[1].name=rancherbackups-insecure --set buckets[2].name=rancherbackups-encrypted --set buckets[0].policy=none --set buckets[1].policy=none --set buckets[2].policy=none --set buckets[0].purge=true --set buckets[1].purge=true minio minio/minio

  while ! (${KUBECTL_CMD} --namespace minio rollout status --timeout 15s deploy/minio 2>/dev/null); do sleep 5; done

  ${KUBECTL_CMD} create secret generic miniocreds --from-literal=accessKey=inspectorgadget --from-literal=secretKey=gogadgetgo
}

list_minio_files() {
  KUBECTL_CMD="kubectl"
  check_kubeconfig

  local POD_NAME
  POD_NAME=$("${KUBECTL_CMD}" get pods --namespace minio -l "release=minio" -o jsonpath="{.items[0].metadata.name}")
  ${KUBECTL_CMD} port-forward $POD_NAME 9000 --namespace minio &
  sleep 5

  DOCKER_HOSTNAME="127.0.0.1"
  if [[ "$(docker info -f'{{.Name}}')" == "lima-rancher-desktop" ]] || [[ "$(docker info -f'{{.Name}}')" == "docker-desktop" ]]; then
      DOCKER_HOSTNAME="host.docker.internal"
  fi

  docker run --rm --net=host -e MC_HOST_miniolocal=https://inspectorgadget:gogadgetgo@${DOCKER_HOSTNAME}:9000 minio/mc ls --insecure miniolocal/rancherbackups
  kill -9 "$(pgrep -f "kubectl.*port-forward.*minio")"
}

retrieve_minio_files() {
  KUBECTL_CMD="kubectl"
  check_kubeconfig

  local POD_NAME
  POD_NAME=$("${KUBECTL_CMD}" get pods --namespace minio -l "release=minio" -o jsonpath="{.items[0].metadata.name}")
  ${KUBECTL_CMD} port-forward $POD_NAME 9000 --namespace minio &
  sleep 5

  DOCKER_HOSTNAME="127.0.0.1"
  if [[ "$(docker info -f'{{.Name}}')" == "lima-rancher-desktop" ]] || [[ "$(docker info -f'{{.Name}}')" == "docker-desktop" ]]; then
      DOCKER_HOSTNAME="host.docker.internal"
  fi

  MINIO_FILES_DIR="minio-files-$(date +%s)"
  mkdir $MINIO_FILES_DIR

  docker run --rm --net=host -v "${PWD}/${MINIO_FILES_DIR}":/data -e MC_HOST_miniolocal=https://inspectorgadget:gogadgetgo@${DOCKER_HOSTNAME}:9000 minio/mc cp --insecure --recursive miniolocal/rancherbackups/ /data/
  kill -9 "$(pgrep -f "kubectl.*port-forward.*minio")"

  echo "Copied all files from Minio to ./${MINIO_FILES_DIR}"
}

copy_minio_files() {
  KUBECTL_CMD="kubectl"
  check_kubeconfig

  local POD_NAME
  POD_NAME=$("${KUBECTL_CMD}" get pods --namespace minio -l "release=minio" -o jsonpath="{.items[0].metadata.name}")
  ${KUBECTL_CMD} port-forward $POD_NAME 9000 --namespace minio &
  sleep 5

  DOCKER_HOSTNAME="127.0.0.1"
  if [[ "$(docker info -f'{{.Name}}')" == "lima-rancher-desktop" ]] || [[ "$(docker info -f'{{.Name}}')" == "docker-desktop" ]]; then
      DOCKER_HOSTNAME="host.docker.internal"
  fi

  SOURCE_FILES_DIR=$1
  echo "Copying from directory ${SOURCE_FILES_DIR}"

  docker run --rm --net=host -v "${PWD}/${SOURCE_FILES_DIR}":/data -e MC_HOST_miniolocal=https://inspectorgadget:gogadgetgo@${DOCKER_HOSTNAME}:9000 minio/mc cp --insecure --recursive /data/ miniolocal/rancherbackups/
  kill -9 "$(pgrep -f "kubectl.*port-forward.*minio")"

  echo "Copied all files from directory ${SOURCE_FILES_DIR} to Minio"
}

reset_minio_bucket() {
  KUBECTL_CMD="kubectl"
  check_kubeconfig

  local POD_NAME
  POD_NAME=$("${KUBECTL_CMD}" get pods --namespace minio -l "release=minio" -o jsonpath="{.items[0].metadata.name}")
  ${KUBECTL_CMD} port-forward $POD_NAME 9000 --namespace minio &
  sleep 5

  DOCKER_HOSTNAME="127.0.0.1"
  if [[ "$(docker info -f'{{.Name}}')" == "lima-rancher-desktop" ]] || [[ "$(docker info -f'{{.Name}}')" == "docker-desktop" ]]; then
      DOCKER_HOSTNAME="host.docker.internal"
  fi

  docker run --rm --net=host -e MC_HOST_miniolocal=https://inspectorgadget:gogadgetgo@${DOCKER_HOSTNAME}:9000 minio/mc rb --insecure --force miniolocal/rancherbackups
  docker run --rm --net=host -e MC_HOST_miniolocal=https://inspectorgadget:gogadgetgo@${DOCKER_HOSTNAME}:9000 minio/mc mb --insecure miniolocal/rancherbackups
  kill -9 "$(pgrep -f "kubectl.*port-forward.*minio")"

  echo "Deleted and created the 'rancherbackups' bucket"
}

deploy_backup_restore() {
  . ./scripts/version &> /dev/null

  helm repo add rancher-charts https://charts.rancher.io
  helm repo update

  if [ -z "${DOCKERHUB_USER}" ]; then
    helm install --wait \
        --create-namespace -n cattle-resources-system \
        rancher-backup-crd rancher-charts/rancher-backup-crd
    helm install --wait \
        -n cattle-resources-system \
        rancher-backup rancher-charts/rancher-backup
  else
    helm install --wait --create-namespace -n cattle-resources-system rancher-backup-crd dist/artifacts/rancher-backup-crd-"${HELM_CHART_VERSION}".tgz
    helm install --wait -n cattle-resources-system rancher-backup dist/artifacts/rancher-backup-"${HELM_CHART_VERSION}".tgz \
        --set image.tag="${TAG}" \
        --set image.repository=${REPO}/backup-restore-operator \
        --set imagePullPolicy=IfNotPresent
  fi
}

create_backup() {
  KUBECTL_CMD="kubectl"

  check_kubeconfig

  if [[ "$1" = "insecure" ]]; then
    ${KUBECTL_CMD} create -f - <<EOF
apiVersion: resources.cattle.io/v1
kind: Backup
metadata:
  name: s3-recurring-backup-insecure
spec:
  storageLocation:
    s3:
      credentialSecretName: miniocreds
      credentialSecretNamespace: default
      bucketName: rancherbackups-insecure
      endpoint: minio.minio.svc.cluster.local:9000
      insecureTLSSkipVerify: true
  resourceSetName: rancher-resource-set
  schedule: "@every 30s"
  retentionCount: 2
EOF
  elif [[ "$1" = "encrypted" ]]; then
    ${KUBECTL_CMD} create -f - <<EOF
apiVersion: resources.cattle.io/v1
kind: Backup
metadata:
  name: s3-backup-encrypted
spec:
  storageLocation:
    s3:
      credentialSecretName: miniocreds
      credentialSecretNamespace: default
      bucketName: rancherbackups-encrypted
      endpoint: minio.minio.svc.cluster.local:9000
      insecureTLSSkipVerify: true
  resourceSetName: rancher-resource-set
  encryptionConfigSecretName: encryptionconfig
EOF
  else
    ${KUBECTL_CMD} create -f - <<EOF
apiVersion: resources.cattle.io/v1
kind: Backup
metadata:
  name: s3-recurring-backup
spec:
  storageLocation:
    s3:
      credentialSecretName: miniocreds
      credentialSecretNamespace: default
      bucketName: rancherbackups
      endpoint: minio.minio.svc.cluster.local:9000
      endpointCA: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNTVENDQWUrZ0F3SUJBZ0lRV2dVVldDaVpkeU9HcnVOZTZtNGlXakFLQmdncWhrak9QUVFEQWpCTU1Sd3cKR2dZRFZRUUtFeE5EWlhKMFoyVnVJRVJsZG1Wc2IzQnRaVzUwTVN3d0tnWURWUVFMRENObGJHbDVZVzFzWlhaNQpRRVZzYVhsaGJYTXRUVUpRTG1GMGRHeHZZMkZzTG01bGREQWVGdzB5TWpBMU1URXhOREF4TWpCYUZ3MHpNakExCk1URXdNakF4TWpCYU1Fd3hIREFhQmdOVkJBb1RFME5sY25SblpXNGdSR1YyWld4dmNHMWxiblF4TERBcUJnTlYKQkFzTUkyVnNhWGxoYld4bGRubEFSV3hwZVdGdGN5MU5RbEF1WVhSMGJHOWpZV3d1Ym1WME1Ga3dFd1lIS29aSQp6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVGSDhVUENsL3ZBSGtNYlRGM0U4eWhTZExOSDJYdWVLVUhucytPNEZSCmhuMDk2T0pLbkdaRmIvSGlXOWlKV2hqNENKNEx1YlN2c2laSlo3WXVEbE05ZmFPQnNqQ0JyekFPQmdOVkhROEIKQWY4RUJBTUNBcVF3RXdZRFZSMGxCQXd3Q2dZSUt3WUJCUVVIQXdFd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZApCZ05WSFE0RUZnUVVJbWpyZXNxbDc4ZkJwd1NWN2xwNGZUNCtObnd3V0FZRFZSMFJCRkV3VDRJRmJXbHVhVytDCkMyMXBibWx2TG0xcGJtbHZnZzl0YVc1cGJ5NXRhVzVwYnk1emRtT0NIVzFwYm1sdkxtMXBibWx2TG5OMll5NWoKYkhWemRHVnlMbXh2WTJGc2dnbHNiMk5oYkdodmMzUXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWdXVDRDVTVpYgpMTmVYSm1oMmxucUV2YWVLZ3FMSFBGZ01PUWcrNFR5Tyt1UUNJUUNJNVdYMUU4NEIrejZ5WDdXS0lCWUpJanRvClJqUWk3NVFuaUYxMHBpMmpLQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  resourceSetName: rancher-resource-set
  schedule: "@every 30s"
  retentionCount: 2
EOF
  fi
}

create_restore() {
  KUBECTL_CMD="kubectl"
  insecure=false
  case $# in
    1) ;;
    2) ;;
    *) echo "Usage: $(basename $0) create-restore [--insecure] BACKUP_FILE" ; exit 1 ;;
  esac
  if [[ "$1" = "--insecure" ]] ; then
    insecure=true
    shift
  fi
  BACKUP="$1"

  check_kubeconfig

  if [[ "$insecure" = "true" ]]; then
    ${KUBECTL_CMD} create -f - <<EOF
apiVersion: resources.cattle.io/v1
kind: Restore
metadata:
  name: restore-minio
spec:
  backupFilename: ${BACKUP}
  prune: true
  storageLocation:
    s3:
      credentialSecretName: miniocreds
      credentialSecretNamespace: default
      bucketName: rancherbackups-insecure
      endpoint: minio.minio.svc.cluster.local:9000
      insecureTLSSkipVerify: true
EOF
  else
    ${KUBECTL_CMD} create -f - <<EOF
apiVersion: resources.cattle.io/v1
kind: Restore
metadata:
  name: restore-minio
spec:
  backupFilename: ${BACKUP}
  prune: true
  storageLocation:
    s3:
      credentialSecretName: miniocreds
      credentialSecretNamespace: default
      bucketName: rancherbackups
      endpoint: minio.minio.svc.cluster.local:9000
      endpointCA: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNTVENDQWUrZ0F3SUJBZ0lRV2dVVldDaVpkeU9HcnVOZTZtNGlXakFLQmdncWhrak9QUVFEQWpCTU1Sd3cKR2dZRFZRUUtFeE5EWlhKMFoyVnVJRVJsZG1Wc2IzQnRaVzUwTVN3d0tnWURWUVFMRENObGJHbDVZVzFzWlhaNQpRRVZzYVhsaGJYTXRUVUpRTG1GMGRHeHZZMkZzTG01bGREQWVGdzB5TWpBMU1URXhOREF4TWpCYUZ3MHpNakExCk1URXdNakF4TWpCYU1Fd3hIREFhQmdOVkJBb1RFME5sY25SblpXNGdSR1YyWld4dmNHMWxiblF4TERBcUJnTlYKQkFzTUkyVnNhWGxoYld4bGRubEFSV3hwZVdGdGN5MU5RbEF1WVhSMGJHOWpZV3d1Ym1WME1Ga3dFd1lIS29aSQp6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVGSDhVUENsL3ZBSGtNYlRGM0U4eWhTZExOSDJYdWVLVUhucytPNEZSCmhuMDk2T0pLbkdaRmIvSGlXOWlKV2hqNENKNEx1YlN2c2laSlo3WXVEbE05ZmFPQnNqQ0JyekFPQmdOVkhROEIKQWY4RUJBTUNBcVF3RXdZRFZSMGxCQXd3Q2dZSUt3WUJCUVVIQXdFd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZApCZ05WSFE0RUZnUVVJbWpyZXNxbDc4ZkJwd1NWN2xwNGZUNCtObnd3V0FZRFZSMFJCRkV3VDRJRmJXbHVhVytDCkMyMXBibWx2TG0xcGJtbHZnZzl0YVc1cGJ5NXRhVzVwYnk1emRtT0NIVzFwYm1sdkxtMXBibWx2TG5OMll5NWoKYkhWemRHVnlMbXh2WTJGc2dnbHNiMk5oYkdodmMzUXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWdXVDRDVTVpYgpMTmVYSm1oMmxucUV2YWVLZ3FMSFBGZ01PUWcrNFR5Tyt1UUNJUUNJNVdYMUU4NEIrejZ5WDdXS0lCWUpJanRvClJqUWk3NVFuaUYxMHBpMmpLQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
EOF
  fi
}

uninstall_charts() {
  check_kubeconfig

  helm uninstall -n minio minio
  helm uninstall -n cattle-resources-system rancher-backup
  helm uninstall -n cattle-resources-system rancher-backup-crd
  kubectl delete deploy rancher-backup -n cattle-resources-system
}

retag_and_push() {
  . ./scripts/version &> /dev/null
  if [ -z "${DOCKERHUB_USER}" ]; then
    echo "Please set DOCKERHUB_USER to your preferred docker image repository"
    exit 0
  fi
  docker tag rancher/backup-restore-operator:"${TAG}" "${DOCKERHUB_USER}"/backup-restore-operator:"${TAG}"
  docker image push "${DOCKERHUB_USER}"/backup-restore-operator:"${TAG}"
}

script-info() {
  echo "./deploy [template/publish/minio/list-minio-files/retrieve-minio-files/copy-minio-files/reset-minio-bucket/backup-restore/create-backup/remove-charts]"
  if [ -z "${KUBECONFIG}" ] || [ -z "${DOCKERHUB_USER}" ] || [ -z "${USE_DOCKER_BUILDX}" ] ; then
    echo ""
    echo "The following variables can be exported to access more functionality (See Descriptions)."
    echo ""
    echo "    [VARIABLE]                            [Description]"
    if [ -z "${KUBECONFIG}" ]; then
      echo ""
      echo "    KUBECONFIG        Path to your cluster's kube config file."
    fi
    if [ -z "${DOCKERHUB_USER}" ]; then
      echo ""
      echo "    DOCKERHUB_USER    Your docker hub username to be used for the image repo."
      echo "                      With this exported you can publish the local image to  "
      echo "                      allow it to be to be deployed on a remote host."
    fi
    if [ -z "${USE_DOCKER_BUILDX}" ]; then
      echo ""
      echo "   USE_DOCKER_BUILDX  This flag will force the package script to use docker "
      echo "                      buildx, setting the target platform to build for amd64 "
      echo "                      This is useful when developing on different architectures."
    fi
  fi
}

case $1 in
    template)
      . ./scripts/version &> /dev/null
      helm template rancher-backup-0.0.0-dev.tgz --output-dir=./bla/ --set image.tag="${TAG}" --set imagePullPolicy=IfNotPresent
    ;;

    publish)
      retag_and_push
    ;;

    encryption_config)
      deploy_encryption_configuration
    ;;

    minio)
      deploy_minio
    ;;

    list-minio-files)
      list_minio_files
    ;;

    retrieve-minio-files)
      retrieve_minio_files
    ;;

    copy-minio-files)
      if [ -z "$2" ]; then
        echo "Usage $0 <local_directory>"
        exit 1
      fi
      if [ ! -d "$2" ]; then
        echo "Given directory ${2} is not a directory"
        exit 1
      fi

      copy_minio_files $2
    ;;

    reset-minio-bucket)
      reset_minio_bucket
    ;;

    backup-restore)
      deploy_backup_restore
    ;;

    create-backup)
      create_backup
    ;;

    create-backup-insecure)
      create_backup insecure
    ;;

    create-backup-encrypted)
      create_backup encrypted
    ;;

    create-restore)
      create_restore "$2"
    ;;

    create-restore-insecure)
      create_restore --insecure "$2"
    ;;

    remove-charts)
      uninstall_charts
    ;;

    *)
      script-info
    ;;

esac
